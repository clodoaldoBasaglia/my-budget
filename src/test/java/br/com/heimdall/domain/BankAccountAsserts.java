package br.com.heimdall.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BankAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountAllPropertiesEquals(BankAccount expected, BankAccount actual) {
        assertBankAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertBankAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountAllUpdatablePropertiesEquals(BankAccount expected, BankAccount actual) {
        assertBankAccountUpdatableFieldsEquals(expected, actual);
        assertBankAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountAutoGeneratedPropertiesEquals(BankAccount expected, BankAccount actual) {
        assertThat(actual)
            .as("Verify BankAccount auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountUpdatableFieldsEquals(BankAccount expected, BankAccount actual) {
        assertThat(actual)
            .as("Verify BankAccount relevant properties")
            .satisfies(a -> assertThat(a.getDescriptionName()).as("check descriptionName").isEqualTo(expected.getDescriptionName()))
            .satisfies(a -> assertThat(a.getAccountNumber()).as("check accountNumber").isEqualTo(expected.getAccountNumber()))
            .satisfies(a -> assertThat(a.getAccountDigit()).as("check accountDigit").isEqualTo(expected.getAccountDigit()))
            .satisfies(a -> assertThat(a.getAgencyNumber()).as("check agencyNumber").isEqualTo(expected.getAgencyNumber()))
            .satisfies(a -> assertThat(a.getAgencyDigit()).as("check agencyDigit").isEqualTo(expected.getAgencyDigit()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankAccountUpdatableRelationshipsEquals(BankAccount expected, BankAccount actual) {
        assertThat(actual)
            .as("Verify BankAccount relationships")
            .satisfies(a -> assertThat(a.getBank()).as("check bank").isEqualTo(expected.getBank()));
    }
}
